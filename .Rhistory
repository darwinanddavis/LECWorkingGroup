graphics.off()
outplot <- out_tibble$outs ; outplot <- as.data.frame(outplot) # clean output
outplot
out_tibble <- out_tibble_wh
mr <- length(death_pars)
mc <- length(beta_pars)
outplot <- out_tibble$outs
outplot
colnames(outplot) <- out_names
mp_ <- outplot[-1,]
mp <- mp_[,out_name]
mp
mp_
out_tibble <- out_tibble_ws
out_tibble
out_tibble$beta
out_tibble$death
outplot <- filter(out_tibble, death == death_access & beta == beta_access)
outplot <- outplot$outs ; outplot <- as.data.frame(outplot) # clean output
outplot$"Total host population" <- outplot[,"S"] + outplot[,"I"] # add sum host population
# plot results
layout(matrix(c(1,2,3,4,5,5), 2, 3, byrow = TRUE)) # set plot window
colnames(outplot) <- c("Time",
"Nutrient biomass",
"Product biomass",
"Hosts (susceptible)",
"Hosts (infected)",
"Total hosts")
for (name in names(outplot)[c(3:5,2,6)]){ # start plot
plot(outplot[,1],outplot[,name],type="l",las=1,bty="n",
xlab="Time (years)",ylab=name,col=colvv,
ylim=c(0,round_any(max(outplot[,name]),10,ceiling))
)
} # end plot
# add mean plot
outplot <- filter(out_tibble, death == death_access & beta == beta_access)
outplot <- outplot$outs ; outplot <- as.data.frame(outplot) # clean output
outplot$"Total host population" <- outplot[,"S"] + outplot[,"I"] # add sum host population
# plot results
layout(matrix(c(1,2,3,4,5,5), 2, 3, byrow = TRUE)) # set plot window
colnames(outplot) <- c("Time",
"Nutrient biomass",
"Product biomass",
"Hosts (susceptible)",
"Hosts (infected)",
"Total hosts")
for (name in names(outplot)[c(3:5,2,6)]){ # start plot
plot(outplot[,1],outplot[,name],type="l",las=1,bty="n",
xlab="Time (years)",ylab=name,col=colvv,
ylim=c(0,round_any(max(outplot[,name]),10,ceiling))
)
} # end plot
# add mean plot
colvv
beta_access <- 0.1 # choose your beta value you want to plot at the end
death_access <- 0.9 # choose your death value you want to plot at the end
colvv <- "orange" # choose your plot line colour
outplot <- filter(out_tibble, death == death_access & beta == beta_access)
outplot <- outplot$outs ; outplot <- as.data.frame(outplot) # clean output
outplot$"Total host population" <- outplot[,"S"] + outplot[,"I"] # add sum host population
# plot results
layout(matrix(c(1,2,3,4,5,5), 2, 3, byrow = TRUE)) # set plot window
colnames(outplot) <- c("Time",
"Nutrient biomass",
"Product biomass",
"Hosts (susceptible)",
"Hosts (infected)",
"Total hosts")
for (name in names(outplot)[c(3:5,2,6)]){ # start plot
plot(outplot[,1],outplot[,name],type="l",las=1,bty="n",
xlab="Time (years)",ylab=name,col=colvv,
ylim=c(0,round_any(max(outplot[,name]),10,ceiling))
)
} # end plot
# add mean plot
outplot <- filter(out_tibble, death == death_access & beta == beta_access)
outplot <- outplot$outs ; outplot <- as.data.frame(outplot) # clean output
outplot$"Total host population" <- outplot[,"S"] + outplot[,"I"] # add sum host population
# plot results
layout(matrix(c(1,2,3,4,5,5), 2, 3, byrow = TRUE)) # set plot window
colnames(outplot) <- c("Time",
"Nutrient biomass",
"Product biomass",
"Hosts (susceptible)",
"Hosts (infected)",
"Total hosts")
for (name in names(outplot)[c(3:5,2,6)]){ # start plot
plot(outplot[,1],outplot[,name],type="l",las=1,bty="n",
xlab="Time (years)",ylab=name,col=colvv,
ylim=c(0,round_any(max(outplot[,name]),10,ceiling))
)
} # end plot
# add mean plot
outplot
waste
waste
waste
beta_access
main(paste0(expression(beta)," = ",beta_access," , death = ",death_access," for ",waste))
title(paste0(expression(beta)," = ",beta_access," , death = ",death_access," for ",waste))
title(paste0(expression(beta)," = ",beta_access," , death = ",death_access," for ",))
title(paste0(expression(beta)," = ",beta_access," , death = ",death_access," for "))
# to set pars as individual beta and death values
npsi_func <- function(waste){ # start npsi_func
waste <- waste
# ------- start simulation # -------
for(beta in beta_pars){ # pass through beta values
for(death in death_pars){ # pass through death values
parameters<-c(r=0.2, K=100, a=500, l=5, fp=0.5, beta=beta,
es=0.1, ei=0.05, fs=0.2, fi=0.1,
d=death, v=0.1, ws=0.05, wi=0.09, dp=0.1)
state<-c(N=N, P=P, S=S, I=In) # set initial conditions
NPSI<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
if(waste=="waste_sum"){
dN.dt <- a - l*N - fp*N*P + dp*P + (d+(1-es)*fs*P)*S + (d+v+(1-ei)*fi*P)*I # summed waste with plant death
dP.dt <- fp*N*r*P*(1-(P/K)) - P*(fs*S+fi*I) # plants produced
dS.dt <- P*(es*fs*S + ei*fi*I) - beta*S - d*S # susceptible host population change
dI.dt <- beta*S - (d+v)*I # infected hosts population change
} # summed waste with plant death
if(waste=="waste_drool"){
dN.dt = a - l*N - fp*N*P + (d+ws)*S + (d+v+wi)*I + (1 - P*(es*fs*S + ei*fi*I)) # nutrient input from messy eating
dP.dt <- fp*N*r*P*(1-(P/K)) - P*(fs*S+fi*I) # plants produced
dS.dt <- P*(es*fs*S + ei*fi*I) - beta*S - (d+ws)*S # susceptible host population change
dI.dt <- beta*S - (d+v+wi)*I # infected hosts population change
} # waste from messy eating per feeding bout
if(waste=="waste_host"){
dN.dt <- a - l*N - fp*N*P + (d+ws)*S + (d+v+wi)*I
dP.dt <- fp*N*r*P*(1-(P/K)) - P*(fs*S+fi*I) # plants produced
dP.dt <- fp*N*r*P*(1-(P/K)) - P*(fs*S*+fi*I) # plants produced
dS.dt <- P*(es*fs*S + ei*fi*I) - beta*S - (d+ws)*S # susceptible host population change
dI.dt <- beta*S - (d+v+wi)*I # infected hosts population change
} # nutrients in env
list(c(dN.dt, dP.dt, dS.dt, dI.dt)) # compile outputs
})
} # end npsi function
# -------  global output # -------
times <- seq(0, years, by=time.out) # set time horizon for simulation (years)
out <- ode(y=state, times=times, func=NPSI, parms=parameters) # run simulation model
out <- data.frame(out)
# save outputs
# out_master[[length(out_master) + 1]] <- out # working with out_master <- list()
out_master[[sc]]$Output <- out # save output for each run
out_master[[sc]]$Parameter[1] <- beta # save beta for each run
out_master[[sc]]$Parameter[2] <- death # save death for each run
sc <- sc + 1
} # end death pars
} # end beta pars
# -------  clean output # -------
# save simulation model to global vector (tibble)
out_tibble <- tibble(
params = map(out_master, "Parameter"),
outs = map(out_master, "Output")
) %>%
mutate(
beta = map(params, 1),
death = map(params, 2)
) %>%
select(beta, death, outs)
# ------- plotting ----------
# start save plot to local dir
pdf(paste0(getwd(),"/npsi_model_plot_",waste,".pdf"),onefile=T,width=10,height=8,paper="a4r")
outplot <- filter(out_tibble, death == death_access & beta == beta_access)
outplot <- outplot$outs ; outplot <- as.data.frame(outplot) # clean output
outplot$"Total host population" <- outplot[,"S"] + outplot[,"I"] # add sum host population
# plot results
layout(matrix(c(1,2,3,4,5,5), 2, 3, byrow = TRUE)) # set plot window
colnames(outplot) <- c("Time",
"Nutrient biomass",
"Product biomass",
"Hosts (susceptible)",
"Hosts (infected)",
"Total hosts")
for (name in names(outplot)[c(3:5,2,6)]){ # start plot for product, suscep hosts, infec hosts, nutrients, and total hosts
plot(outplot[,1],outplot[,name],type="l",las=1,bty="n",
xlab="Time (years)",ylab=name,col=colvv,
ylim=c(0,round_any(max(outplot[,name]),10,ceiling))
)
title(paste0(expression(beta)," = ",beta_access," , death = ",death_access," for ",waste))
} # end plot
# add mean plot
dev.off() # save output to dir
cat(paste0("\n\n\nPlot is saved in \n",getwd(), "\nas npsi_model_plot_",waste,".pdf\n\n\n"))
return(out_tibble)
} # ------- end npsi_func
wastes <- c(waste_host,waste_drool,waste_sum)
out_tibble_ws <- npsi_func("waste_sum")
title(paste0(expression(beta)," = ",beta_access," , death = ",death_access))
title(paste0(expression(beta)," = ",beta_access," , death = ",death_access))
beta_access <- 0.1 # choose your beta value you want to plot at the end
death_access <- 0.9 # choose your death value you want to plot at the end
colvv <- "orange" # choose your plot line colour
## initial conditions
N <- 200 # size of nutrient biomass in env
P <- 200 # initial products in env
S <- 20 # num of susceptible hosts
In <- 2 # num of infected hosts
years <- 100 # number of years to run simulation
time.out <- 0.01 # simulation time step (0.01 = 1 year if years = 100)
##########################################################################################
##################################### Setup simulation model #############################
##########################################################################################
# ---------------------- run the model from here # ----------------------
# load packages
beta_pars <- seq(0.1,1,0.1) # transmission rate in model
death_pars <- seq(0.1,1,0.1) # death rate in model
# desired outputs
out <- list()
out_master <- list() # NPSI output
out_tibble <- tibble()
outplot <- list()
param_space <- list(beta_pars,death_pars) # summed parameter space
# create empty list
out_master <- rep(
list(structure(list(
pars = numeric(),
outs = list()
),
.Names = c("Parameter", "Output")))
,prod(as.numeric(summary(param_space)[,1]))
)
sc <- 1 # timer in simulation model
##########################################################################################
################################### create simulation model  #################################
# to set pars as individual beta and death values
npsi_func <- function(waste){ # start npsi_func
waste <- waste
# ------- start simulation # -------
for(beta in beta_pars){ # pass through beta values
for(death in death_pars){ # pass through death values
parameters<-c(r=0.2, K=100, a=500, l=5, fp=0.5, beta=beta,
es=0.1, ei=0.05, fs=0.2, fi=0.1,
d=death, v=0.1, ws=0.05, wi=0.09, dp=0.1)
state<-c(N=N, P=P, S=S, I=In) # set initial conditions
NPSI<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
if(waste=="waste_sum"){
dN.dt <- a - l*N - fp*N*P + dp*P + (d+(1-es)*fs*P)*S + (d+v+(1-ei)*fi*P)*I # summed waste with plant death
dP.dt <- fp*N*r*P*(1-(P/K)) - P*(fs*S+fi*I) # plants produced
dS.dt <- P*(es*fs*S + ei*fi*I) - beta*S - d*S # susceptible host population change
dI.dt <- beta*S - (d+v)*I # infected hosts population change
} # summed waste with plant death
if(waste=="waste_drool"){
dN.dt = a - l*N - fp*N*P + (d+ws)*S + (d+v+wi)*I + (1 - P*(es*fs*S + ei*fi*I)) # nutrient input from messy eating
dP.dt <- fp*N*r*P*(1-(P/K)) - P*(fs*S+fi*I) # plants produced
dS.dt <- P*(es*fs*S + ei*fi*I) - beta*S - (d+ws)*S # susceptible host population change
dI.dt <- beta*S - (d+v+wi)*I # infected hosts population change
} # waste from messy eating per feeding bout
if(waste=="waste_host"){
dN.dt <- a - l*N - fp*N*P + (d+ws)*S + (d+v+wi)*I
dP.dt <- fp*N*r*P*(1-(P/K)) - P*(fs*S+fi*I) # plants produced
dP.dt <- fp*N*r*P*(1-(P/K)) - P*(fs*S*+fi*I) # plants produced
dS.dt <- P*(es*fs*S + ei*fi*I) - beta*S - (d+ws)*S # susceptible host population change
dI.dt <- beta*S - (d+v+wi)*I # infected hosts population change
} # nutrients in env
list(c(dN.dt, dP.dt, dS.dt, dI.dt)) # compile outputs
})
} # end npsi function
# -------  global output # -------
times <- seq(0, years, by=time.out) # set time horizon for simulation (years)
out <- ode(y=state, times=times, func=NPSI, parms=parameters) # run simulation model
out <- data.frame(out)
# save outputs
# out_master[[length(out_master) + 1]] <- out # working with out_master <- list()
out_master[[sc]]$Output <- out # save output for each run
out_master[[sc]]$Parameter[1] <- beta # save beta for each run
out_master[[sc]]$Parameter[2] <- death # save death for each run
sc <- sc + 1
} # end death pars
} # end beta pars
# -------  clean output # -------
# save simulation model to global vector (tibble)
out_tibble <- tibble(
params = map(out_master, "Parameter"),
outs = map(out_master, "Output")
) %>%
mutate(
beta = map(params, 1),
death = map(params, 2)
) %>%
select(beta, death, outs)
# ------- plotting ----------
# start save plot to local dir
pdf(paste0(getwd(),"/npsi_model_plot_",waste,".pdf"),onefile=T,width=10,height=8,paper="a4r")
outplot <- filter(out_tibble, death == death_access & beta == beta_access)
outplot <- outplot$outs ; outplot <- as.data.frame(outplot) # clean output
outplot$"Total host population" <- outplot[,"S"] + outplot[,"I"] # add sum host population
# plot results
layout(matrix(c(1,2,3,4,5,5), 2, 3, byrow = TRUE)) # set plot window
colnames(outplot) <- c("Time",
"Nutrient biomass",
"Product biomass",
"Hosts (susceptible)",
"Hosts (infected)",
"Total hosts")
for (name in names(outplot)[c(3:5,2,6)]){ # start plot for product, suscep hosts, infec hosts, nutrients, and total hosts
plot(outplot[,1],outplot[,name],type="l",las=1,bty="n",
xlab="Time (years)",ylab=name,col=colvv,
ylim=c(0,round_any(max(outplot[,name]),10,ceiling))
)
title(paste0(expression(beta)," = ",beta_access," , death = ",death_access," for ",waste))
} # end plot
# add mean plot
dev.off() # save output to dir
cat(paste0("\n\n\nPlot is saved in \n",getwd(), "\nas npsi_model_plot_",waste,".pdf\n\n\n"))
return(out_tibble)
} # ------- end npsi_func
# set waste outputs
out_tibble_ws <- npsi_func("waste_sum")
out_tibble_ws <- npsi_func("waste_sum")
beta_access <- 0.1 # choose your beta value you want to plot at the end
death_access <- 0.9 # choose your death value you want to plot at the end
colvv <- "orange" # choose your plot line colour
## initial conditions
N <- 200 # size of nutrient biomass in env
P <- 200 # initial products in env
S <- 20 # num of susceptible hosts
In <- 2 # num of infected hosts
years <- 100 # number of years to run simulation
time.out <- 0.01 # simulation time step (0.01 = 1 year if years = 100)
##########################################################################################
##################################### Setup simulation model #############################
##########################################################################################
# ---------------------- run the model from here # ----------------------
# set param space
beta_pars <- seq(0.1,1,0.1) # transmission rate in model
death_pars <- seq(0.1,1,0.1) # death rate in model
# desired outputs
out <- list()
out_master <- list() # NPSI output
out_tibble <- tibble()
outplot <- list()
param_space <- list(beta_pars,death_pars) # summed parameter space
# create empty list
out_master <- rep(
list(structure(list(
pars = numeric(),
outs = list()
),
.Names = c("Parameter", "Output")))
,prod(as.numeric(summary(param_space)[,1]))
)
sc <- 1 # timer in simulation model
# to set pars as individual beta and death values
npsi_func <- function(){ # start npsi_func
# ------- start simulation # -------
for(beta in beta_pars){ # pass through beta values
for(death in death_pars){ # pass through death values
parameters<-c(r=0.2, K=100, a=500, l=5, fp=0.5, beta=beta,
es=0.1, ei=0.05, fs=0.2, fi=0.1,
d=death, v=0.1, ws=0.05, wi=0.09)
state<-c(N=N, P=P, S=S, I=In) # set initial conditions
NPSI<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
dN.dt <- a - l*N - fp*N*P + (d+ws)*S + (d+v+wi)*I  # nutrients in env
dP.dt <- fp*N*r*P*(1-(P/K)) - P*(fs*S+fi*I) # plants produced
dS.dt <- P*(es*fs*S + ei*fi*I) - beta*S - (d+ws)*S # susceptible host population change
dI.dt <- beta*S - (d+v+wi)*I # infected hosts population change
list(c(dN.dt, dP.dt, dS.dt, dI.dt)) # compile outputs
})
} # end npsi function
# -------  global output # -------
times <- seq(0, years, by=time.out) # set time horizon for simulation (years)
out <- ode(y=state, times=times, func=NPSI, parms=parameters) # run simulation model
out <- data.frame(out)
# save outputs
# out_master[[length(out_master) + 1]] <- out # working with out_master <- list()
out_master[[sc]]$Output <- out # save output for each run
out_master[[sc]]$Parameter[1] <- beta # save beta for each run
out_master[[sc]]$Parameter[2] <- death # save death for each run
sc <- sc + 1
} # end death pars
} # end beta pars
# -------  clean output # -------
# save simulation model to global vector (tibble)
out_tibble <- tibble(
params = map(out_master, "Parameter"),
outs = map(out_master, "Output")
) %>%
mutate(
beta = map(params, 1),
death = map(params, 2)
) %>%
select(beta, death, outs)
# ------- plotting ----------
# start save plot to local dir
pdf(paste0(getwd(),"/npsi_model_plot.pdf"),onefile=T,width=10,height=8,paper="a4r")
outplot <- filter(out_tibble, death == death_access & beta == beta_access)
outplot <- outplot$outs ; outplot <- as.data.frame(outplot) # clean output
outplot$"Total host population" <- outplot[,"S"] + outplot[,"I"] # add sum host population
# plot results
layout(matrix(c(1,2,3,4,5,5), 2, 3, byrow = TRUE)) # set plot window
colnames(outplot) <- c("Time",
"Nutrient biomass",
"Product biomass",
"Hosts (susceptible)",
"Hosts (infected)",
"Total hosts")
for (name in names(outplot)[c(3:5,2,6)]){ # start plot for product, suscep hosts, infec hosts, nutrients, and total hosts
plot(outplot[,1],outplot[,name],type="l",las=1,bty="n",
xlab="Time (years)",ylab=name,col=colvv,
ylim=c(0,round_any(max(outplot[,name]),10,ceiling))
)
title(paste0(expression(beta)," = ",beta_access," , death = ",death_access))
} # end plot
# add mean plot
dev.off() # save output to dir
cat(paste0("\n\n\nPlot is saved in \n",getwd(), "\nas npsi_model_plot.pdf\n\n\n"))
return(out_tibble)
} # ------- end npsi_func
out_tibble <- npsi_func()
out_tibble
beta
# set param space
beta_pars <- seq(0.1,1,0.1) # transmission rate in model
death_pars <- seq(0.1,1,0.1) # death rate in model
# desired outputs
out <- list()
out_master <- list() # NPSI output
out_tibble <- tibble()
outplot <- list()
param_space <- list(beta_pars,death_pars) # summed parameter space
# create empty list
out_master <- rep(
list(structure(list(
pars = numeric(),
outs = list()
),
.Names = c("Parameter", "Output")))
,prod(as.numeric(summary(param_space)[,1]))
)
sc <- 1 # timer in simulation model
##########################################################################################
################################### create simulation model  #################################
# to set pars as individual beta and death values
npsi_func <- function(){ # start npsi_func
# ------- start simulation # -------
for(beta in beta_pars){ # pass through beta values
for(death in death_pars){ # pass through death values
parameters<-c(r=0.2, K=100, a=500, l=5, fp=0.5, beta=beta,
es=0.1, ei=0.05, fs=0.2, fi=0.1,
d=death, v=0.1, ws=0.05, wi=0.09)
state<-c(N=N, P=P, S=S, I=In) # set initial conditions
NPSI<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
dN.dt <- a - l*N - fp*N*P + (d+ws)*S + (d+v+wi)*I  # nutrients in env
dP.dt <- fp*N*r*P*(1-(P/K)) - P*(fs*S+fi*I) # plants produced
dS.dt <- P*(es*fs*S + ei*fi*I) - beta*S - (d+ws)*S # susceptible host population change
dI.dt <- beta*S - (d+v+wi)*I # infected hosts population change
list(c(dN.dt, dP.dt, dS.dt, dI.dt)) # compile outputs
})
} # end npsi function
# -------  global output # -------
times <- seq(0, years, by=time.out) # set time horizon for simulation (years)
out <- ode(y=state, times=times, func=NPSI, parms=parameters) # run simulation model
out <- data.frame(out)
# save outputs
# out_master[[length(out_master) + 1]] <- out # working with out_master <- list()
out_master[[sc]]$Output <- out # save output for each run
out_master[[sc]]$Parameter[1] <- beta # save beta for each run
out_master[[sc]]$Parameter[2] <- death # save death for each run
sc <- sc + 1
} # end death pars
} # end beta pars
# -------  clean output # -------
# save simulation model to global vector (tibble)
out_tibble <- tibble(
params = map(out_master, "Parameter"),
outs = map(out_master, "Output")
) %>%
mutate(
beta = map(params, 1),
death = map(params, 2)
) %>%
select(beta, death, outs)
# ------- plotting ----------
# start save plot to local dir
pdf(paste0(getwd(),"/npsi_model_plot.pdf"),onefile=T,width=10,height=8,paper="a4r")
outplot <- filter(out_tibble, death == death_access & beta == beta_access)
outplot <- outplot$outs ; outplot <- as.data.frame(outplot) # clean output
outplot$"Total host population" <- outplot[,"S"] + outplot[,"I"] # add sum host population
# plot results
layout(matrix(c(1,2,3,4,5,5), 2, 3, byrow = TRUE)) # set plot window
colnames(outplot) <- c("Time",
"Nutrient biomass",
"Product biomass",
"Hosts (susceptible)",
"Hosts (infected)",
"Total hosts")
for (name in names(outplot)[c(3:5,2,6)]){ # start plot for product, suscep hosts, infec hosts, nutrients, and total hosts
plot(outplot[,1],outplot[,name],type="l",las=1,bty="n",
xlab="Time (years)",ylab=name,col=colvv,
ylim=c(0,round_any(max(outplot[,name]),10,ceiling))
)
#title(paste0(expression(beta)," = ",beta_access," , death = ",death_access))
} # end plot
# add mean plot
dev.off() # save output to dir
cat(paste0("\n\n\nPlot is saved in \n",getwd(), "\nas npsi_model_plot.pdf\n\n\n"))
return(out_tibble)
} # ------- end npsi_func
out_tibble <- npsi_func()
out_tibble
out_tibble
out_master
Output
out
out
times
state
NPSI
parameters
